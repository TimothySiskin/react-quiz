{"version":3,"sources":["API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","images/max-whitehead.jpg","app.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userCliked","QuestionCard","callback","userAnswer","questionNum","totalQuestions","console","log","className","dangerouslySetInnerHTML","__html","answer","index","correctAnswer","disabled","onClick","value","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_Questions","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d8961949.chunk.js","sourcesContent":["import QuestionCard from \"./components/QuestionCard\";\r\nimport { shuffleArray } from \"./utils\";\r\n\r\nexport type Question = {\r\n  category: string;\r\n  type: string;\r\n  difficulty: string;\r\n  question: string;\r\n  correct_answer: string;\r\n  incorrect_answers: string[];\r\n};\r\n\r\nexport type QuestionState = Question & { answers: string[] };\r\n\r\nexport enum Difficulty {\r\n  EASY = \"easy\",\r\n  MEDIUM = \"medium\",\r\n  HARD = \"hard\",\r\n}\r\n\r\nexport const fetchQuizQuestions = async (\r\n  amount: number,\r\n  difficulty: Difficulty\r\n) => {\r\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n  const data = await (await fetch(endpoint)).json();\r\n  return data.results.map((question: Question) => ({\r\n    ...question,\r\n    answers: shuffleArray([\r\n      ...question.incorrect_answers,\r\n      question.correct_answer,\r\n    ]),\r\n  }));\r\n};\r\n","export const shuffleArray = (array: any[]) => {\r\n  return [...array].sort(() => {\r\n    return Math.random() - 0.5;\r\n  });\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1100px;\r\n  background: #ebfeff;\r\n  border-radius: 10px;\r\n  border: 2px solid #0085a3;\r\n  padding: 20px;\r\n  box-shadow: 0px 5px 10px rgba (0, 0, 0, 0.25);\r\n  text-align: center;\r\n\r\n  p {\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userCliked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n\r\n  button {\r\n    cursor: pointer;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({ correct, userCliked }) =>\r\n      correct\r\n        ? \"linear-gradient(90deg, #56ffa4, #59bc86)\"\r\n        : !correct && userCliked\r\n        ? \"linear-gradient(90deg, #ff5656, #c16868)\"\r\n        : \"linear-gradient(90deg, #56ccff, #6eafb4)\"};\r\n    border: 3px solid #fff;\r\n    box-shadow: 1px 2px 0px rgba (0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { AnswerObject } from \"../App\";\r\n\r\n//Styles\r\nimport { Wrapper, ButtonWrapper } from \"./QuestionCard.styles\";\r\n\r\n//Types\r\n\r\ntype Props = {\r\n  question: string;\r\n  answers: string[];\r\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  userAnswer: AnswerObject | undefined;\r\n  questionNum: number;\r\n  totalQuestions: number;\r\n};\r\n\r\nconst QuestionCard: React.FC<Props> = ({\r\n  question,\r\n  answers,\r\n  callback,\r\n  userAnswer,\r\n  questionNum,\r\n  totalQuestions,\r\n}) => {\r\n  console.log(answers);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <p className=\"number\">\r\n        Question: {questionNum} / {totalQuestions}\r\n      </p>\r\n      <p dangerouslySetInnerHTML={{ __html: question }} />\r\n      <div>\r\n        {answers.map((answer, index) => (\r\n          <ButtonWrapper\r\n            key={index}\r\n            correct={userAnswer?.correctAnswer === answer}\r\n            userCliked={userAnswer?.answer === answer}\r\n          >\r\n            <button disabled={!!userAnswer} onClick={callback} value={answer}>\r\n              <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n            </button>\r\n          </ButtonWrapper>\r\n        ))}\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default QuestionCard;\r\n","export default __webpack_public_path__ + \"static/media/max-whitehead.08829d95.jpg\";","import styled, { createGlobalStyle } from \"styled-components\";\r\nimport BGImage from \"./images/max-whitehead.jpg\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\nhtml {\r\n    height : 100%;\r\n\r\n}\r\n\r\nbody {\r\n    background-image: url(${BGImage});\r\n    background-size: cover;\r\n    margin: 0;\r\n    padding: 0 20ps;\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n\r\n* {\r\n    box-sizing: border-box;\r\n    font-family: 'Catamaran', sans-serif;\r\n}\r\n\r\n\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  > p {\r\n    color: #fff;\r\n  }\r\n\r\n  .score {\r\n    color: #fff;\r\n    font-size: 2rem;\r\n    margin: 0;\r\n  }\r\n  h1 {\r\n    font-family: \"Fascinate Inline\", sans-serif;\r\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\r\n    background-size: 100%;\r\n    background-clip: text;\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n    -moz-background-clip: text;\r\n    -moz-text-fill-color: transparent;\r\n    filter: drop-shadow(2px 2px #0085a3);\r\n    font-size: 70px;\r\n    font-weight: 400;\r\n    text-align: center;\r\n    margin: 20px;\r\n    color: white;\r\n  }\r\n\r\n  .start,\r\n  .next {\r\n    cursor: pointer;\r\n    background: linear-gradient(180deg, #fff, #ffcc91);\r\n    border: 2px solid #d38558;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    border-radius: 10px;\r\n    height: 40px;\r\n    margin: 20px 0;\r\n    padding: 0 40px;\r\n  }\r\n\r\n  .start {\r\n    max-width: 200px;\r\n  }\r\n`;\r\n","import React, { useState } from \"react\";\nimport { fetchQuizQuestions } from \"./API\";\n//Components\nimport QuestionCard from \"./components/QuestionCard\";\n//Types\nimport { QuestionState, Difficulty } from \"./API\";\n//Styles\nimport { GlobalStyle, Wrapper } from \"./app.styles\";\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\n//Variables\nconst TOTAL_Questions = 10;\n\nconst App = () => {\n  //State\n\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  //Functions\n\n  //console.log(questions);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_Questions,\n      Difficulty.EASY\n    );\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      //user answer\n      const answer = e.currentTarget.value;\n      //Chceck aswer is correct answer\n      const correct = questions[number].correct_answer === answer;\n      //Add Score if answer is correct\n      if (correct) {\n        setScore((prev) => prev + 1);\n      }\n      //Save answer in the array user answer\n      const answerObject: AnswerObject = {\n        question: questions[number].question,\n        answer: answer,\n        correct: correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    //Move to the next question if not the last question\n    const nextQuestion = number + 1;\n\n    if (nextQuestion === TOTAL_Questions) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  };\n  //Render\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>REACT QUIZ</h1>\n        {gameOver || userAnswers.length === TOTAL_Questions ? (\n          <button className=\"start\" onClick={startTrivia}>\n            START\n          </button>\n        ) : null}\n        {gameOver === false ? <p className=\"score\">Score: {score}</p> : null}\n        {loading ? <p>Loading Questions ...</p> : null}\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNum={number + 1}\n            totalQuestions={TOTAL_Questions}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n        )}\n        {!gameOver &&\n          !loading &&\n          userAnswers.length === number + 1 &&\n          number !== TOTAL_Questions - 1 && (\n            <button className=\"next\" onClick={nextQuestion}>\n              Next Question\n            </button>\n          )}\n      </Wrapper>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}